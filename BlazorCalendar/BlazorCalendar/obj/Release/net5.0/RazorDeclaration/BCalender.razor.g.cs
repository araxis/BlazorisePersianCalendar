// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorCalendar
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Projects\Components\BlazorCalendar\BlazorCalendar\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Projects\Components\BlazorCalendar\BlazorCalendar\_Imports.razor"
using Blazorise;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Projects\Components\BlazorCalendar\BlazorCalendar\BCalender.razor"
using DNTPersianUtils.Core;

#line default
#line hidden
#nullable disable
    public partial class BCalender : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 66 "C:\Projects\Components\BlazorCalendar\BlazorCalendar\BCalender.razor"
       

    readonly IEnumerable<string> _weekDayNames=new List<string>{"ش","ی","د","س","چ","پ","ج"};
    //new DateTime(0622,3,3)

    [Parameter]
    public DateTime SelectedDate { get; set; } =DateTime.Now;

    DateTime _currentDate = DateTime.Now;

    [Parameter]
    public EventCallback<DateTime> SelectedDateChanged { get; set; }


    DateTime _startDate;

    int _rows;

    protected override void OnInitialized()
    {
        // base.OnInitialized();
        if (SelectedDate == DateTime.MinValue)
        {
            SelectedDate = DateTime.Now;
            _currentDate=DateTime.Now;
        }
        _currentDate = SelectedDate;
        InitMonth(_currentDate);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (SelectedDate != DateTime.MinValue) return;
        SelectedDate = DateTime.Now;
        _currentDate=DateTime.Now;
    }

    private void InitMonth(DateTime date)
    {
        _rows = 0;
        var monthInfo = date.GetPersianMonthStartAndEndDates();
        var startWeekDay = monthInfo.StartDate.PersianDayOfWeek();
        var diff = (startWeekDay - 0);
        _startDate = monthInfo.StartDate.AddDays(-(diff));
        var endDate = monthInfo.EndDate;
        var days = (endDate - _startDate).Days;
        _rows = (days / 7) + 1;

    }

    async Task SelectDate(DateTime date)
    {
        await SelectedDateChanged.InvokeAsync(date);
    }

    void Prev()
    {
        _currentDate = _currentDate.AddMonths(-1);
        InitMonth(_currentDate);

    }

    void Nex()
    {
        _currentDate = _currentDate.AddMonths(1);
        InitMonth(_currentDate);
    }



#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
