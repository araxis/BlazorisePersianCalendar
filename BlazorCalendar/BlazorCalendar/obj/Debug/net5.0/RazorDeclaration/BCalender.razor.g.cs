// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorCalendar
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Projects\Components\BlazorCalendar\BlazorCalendar\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Projects\Components\BlazorCalendar\BlazorCalendar\_Imports.razor"
using Blazorise;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Projects\Components\BlazorCalendar\BlazorCalendar\BCalender.razor"
using DNTPersianUtils.Core;

#line default
#line hidden
#nullable disable
    public partial class BCalender : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 72 "C:\Projects\Components\BlazorCalendar\BlazorCalendar\BCalender.razor"
       

    readonly IEnumerable<string> _weekDayNames = new List<string> { "ش", "ی", "د", "س", "چ", "پ", "ج" };
    //new DateTime(0622,3,3)

    [Parameter]
    public DateTime SelectedDate { get; set; } = DateTime.Now;

    DateTime _currentDate = DateTime.Now;

    [Parameter]
    public EventCallback<DateTime> SelectedDateChanged { get; set; }

    [Parameter]
    public bool Blocked { get; set; } = true;

    [Parameter]
    public bool RenderSelectedDate { get; set; } = true;

    [Parameter]
    public bool RenderToday { get; set; } = true;



    [Parameter]
    public IEnumerable<SpecialDay> SpecialDays { get; set; } = new List<SpecialDay>();



    [Parameter]
    public EventCallback<YearMonthInfo> CurrentYearMonthInfoChanged { get; set; }



    DateTime _startDate;

    int _rows;


    protected override void OnInitialized()
    {
        // base.OnInitialized();
        if (SelectedDate == DateTime.MinValue)
        {
            SelectedDate = DateTime.Now;
            _currentDate = DateTime.Now;
        }
        _currentDate = SelectedDate;
        InitMonth(_currentDate);

    }



    private void InitMonth(DateTime date)
    {
        _rows = 0;
        var monthInfo = date.GetPersianMonthStartAndEndDates();
        var startWeekDay = monthInfo.StartDate.PersianDayOfWeek();
        var diff = (startWeekDay - 0);
        _startDate = monthInfo.StartDate.AddDays(-(diff));
        var endDate = monthInfo.EndDate;
        var days = (endDate - _startDate).Days;
        _rows = (days / 7) + 1;

    }



    async Task SelectDate(DateTime date)
    {
        await SelectedDateChanged.InvokeAsync(date);
    }

    async  Task Prev()
    {
        _currentDate = _currentDate.AddMonths(-1);

        InitMonth(_currentDate);
        var monthInfo = _currentDate.GetPersianMonthStartAndEndDates();
        await CurrentYearMonthInfoChanged.InvokeAsync(new YearMonthInfo(monthInfo.StartDate,monthInfo.EndDate));

    }

    async Task Nex()
    {
        _currentDate = _currentDate.AddMonths(1);
        InitMonth(_currentDate);
        var monthInfo = _currentDate.GetPersianMonthStartAndEndDates();
        await CurrentYearMonthInfoChanged.InvokeAsync(new YearMonthInfo(monthInfo.StartDate,monthInfo.EndDate));
    }


    Color GetDateBackgroundColor(DateTime date)
    {

        var specialDay = SpecialDays.FirstOrDefault(d => d.Date.DayOfYear == date.DayOfYear);
        if (specialDay != null) return specialDay.BackgroundColor;


        if(date.DayOfYear == DateTime.Now.DayOfYear && RenderToday)return  Color.Success;
        return date.DayOfYear==SelectedDate.DayOfYear ? Color.Success : Color.None;
    }

    TextColor GetDateTextColor(DateTime date)
    {
        const TextColor todayColor = TextColor.Black50;
        if (!RenderSelectedDate) return todayColor;
        return date.DayOfYear == SelectedDate.DayOfYear ? TextColor.Warning : TextColor.Black50;


    }

    bool MustBeOutlined(DateTime date)
    {
        if (date.DayOfYear == DateTime.Now.DayOfYear) return false;
        var specialDay = SpecialDays.FirstOrDefault(d => d.Date.DayOfYear == date.DayOfYear);
        if (specialDay != null) return false;
        return date.DayOfYear == SelectedDate.DayOfYear;
    }


#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
