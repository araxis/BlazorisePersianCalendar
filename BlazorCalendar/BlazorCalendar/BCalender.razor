
@using DNTPersianUtils.Core


<Card>
    <CardHeader Padding="Padding.Is0.FromLeft.Is0.FromRight">


        <Button Margin="Margin.Is0.FromRight" Size="Size.Small" Clicked="Prev" Float="Float.Right">@("<")</Button>
        <Button Margin="Margin.Is0.FromLeft" Size="Size.Small" Clicked="Nex" Float="Float.Left">></Button>

        <Text Float="Float.None" Alignment="TextAlignment.Center" Color="TextColor.Primary">
            @($"{_currentDate.GetPersianMonth().GetPersianMonthName()} {_currentDate.GetPersianYear().ToPersianNumbers()} ")
        </Text>

    </CardHeader>
    <CardBody Padding="Padding.Is0">
        <Table Narrow="true" Borderless="true" Padding="Padding.Is0" Responsive="true">
            <TableHeader ThemeContrast="ThemeContrast.Light">
                <TableRow >
                    @foreach (var value in _weekDayNames)
                    {
                        <TableHeaderCell   TextAlignment="TextAlignment.Center">@value</TableHeaderCell>
                    }

                </TableRow>
            </TableHeader>
            <TableBody Padding="Padding.Is0">
                @for (var i = 0; i < _rows; i++)
                {
                    var week = i;


                    <TableRow>

                        @for (var j = 0; j <= 6; j++)
                        {
                            var dayOfWeek = j;
                            var date = _startDate.AddDays((week * 7) + dayOfWeek);
                            var bgColor = GetDateBackgroundColor(date);
                            var todayColor = GetDateTextColor(date);
                            var outlined = MustBeOutlined(date);

                            <TableRowCell @key="date" TextAlignment="TextAlignment.Center">

                                @if (date.GetPersianMonth() == _currentDate.GetPersianMonth())
                                {

                                    <Button Size="@DayButtonSize" Outline="outlined" Clicked="@(() => SelectDate(date))" Block="@Blocked" Color="bgColor">
                                        <Text Alignment="TextAlignment.Center" Color="todayColor">
                                            @($"{date.GetPersianDayOfMonth().ToPersianNumbers()}")
                                        </Text>

                                    </Button>
                                }


                            </TableRowCell>
                        }

                    </TableRow>

                }
            </TableBody>
        </Table>



    </CardBody>
</Card>

@code {

    readonly IEnumerable<string> _weekDayNames = new List<string> { "ش", "ی", "د", "س", "چ", "پ", "ج" };
    //new DateTime(0622,3,3)

    [Parameter]
    public DateTime SelectedDate { get; set; } = DateTime.Now;

    DateTime _currentDate = DateTime.Now;

    [Parameter]
    public EventCallback<DateTime> SelectedDateChanged { get; set; }

    [Parameter]
    public bool Blocked { get; set; } = true;

    [Parameter]
    public Size DayButtonSize { get; set; }

    [Parameter]
    public bool RenderSelectedDate { get; set; } = true;

    [Parameter]
    public bool RenderToday { get; set; } = true;



    [Parameter]
    public IEnumerable<SpecialDay> SpecialDays { get; set; } = new List<SpecialDay>();



    [Parameter]
    public EventCallback<YearMonthInfo> CurrentYearMonthInfoChanged { get; set; }



    DateTime _startDate;

    int _rows;


    protected override void OnInitialized()
    {
        // base.OnInitialized();
        if (SelectedDate == DateTime.MinValue)
        {
            SelectedDate = DateTime.Now;
            _currentDate = DateTime.Now;
        }

        var monthInfo = SelectedDate.GetPersianMonthStartAndEndDates();

        _currentDate = monthInfo.StartDate;
        InitMonth(_currentDate);

    }



    private void InitMonth(DateTime date)
    {
        _rows = 0;
        var monthInfo = date.GetPersianMonthStartAndEndDates();
        var startWeekDay = monthInfo.StartDate.PersianDayOfWeek();
        var diff = (startWeekDay - 0);
        _startDate = monthInfo.StartDate.AddDays(-(diff));

        var endDate = monthInfo.EndDate;
        var days = (endDate - _startDate).Days;
        _rows = (days / 7) + 1;

    }



    async Task SelectDate(DateTime date)
    {
        // SelectedDate = date;
        await SelectedDateChanged.InvokeAsync(date);
    }

    async Task Prev()
    {
        var info = _currentDate.GetPersianMonthStartAndEndDates();
        _currentDate = info.StartDate.AddDays(-1);

        InitMonth(_currentDate);
        var monthInfo = _currentDate.GetPersianMonthStartAndEndDates();
        await CurrentYearMonthInfoChanged.InvokeAsync(new YearMonthInfo(monthInfo.StartDate, monthInfo.EndDate));

    }

    async Task Nex()
    {
        var info = _currentDate.GetPersianMonthStartAndEndDates();
        _currentDate = info.EndDate.AddDays(1);
        InitMonth(_currentDate);
        var monthInfo = _currentDate.GetPersianMonthStartAndEndDates();
        await CurrentYearMonthInfoChanged.InvokeAsync(new YearMonthInfo(monthInfo.StartDate, monthInfo.EndDate));
    }


    Color GetDateBackgroundColor(DateTime date)
    {

        var specialDay = SpecialDays.FirstOrDefault(d => d.Date.DayOfYear == date.DayOfYear);
        if (specialDay != null) return specialDay.BackgroundColor;



        // if(date.DayOfYear == DateTime.Now.DayOfYear && RenderToday)return  Color.Success;
        if (date.Date == DateTime.Now.Date && RenderToday) return Color.Success;
        return date.Date == SelectedDate.Date ? Color.Success : Color.None;
    }

    TextColor GetDateTextColor(DateTime date)
    {
        const TextColor todayColor = TextColor.Black50;
        if (!RenderSelectedDate) return todayColor;
        return date.Date == SelectedDate.Date ? TextColor.Warning : TextColor.Black50;


    }

    bool MustBeOutlined(DateTime date)
    {
        //if (date.Date == DateTime.Now.Date) return false;
        var specialDay = SpecialDays.FirstOrDefault(d => d.Date.DayOfYear == date.DayOfYear);
        if (specialDay != null) return false;
        return date.Date == SelectedDate.Date;
    }

}
