@typeparam TItem

<Select TValue="int" Size="@Size" SelectedValue="@_selectedItemIndex" SelectedValueChanged="@OnSelectedIdChanged">
    @if (ShowSelectMessage)
    {
        <SelectItem Value="-1">@SelectMessage</SelectItem>
    }

    @foreach (var item in _items)
    {
        if (ChildContent!=null)
        {
            <SelectItem Value="@(_items.IndexOf(item))">@(ChildContent(item))</SelectItem>
        }
        else
        {
            <SelectItem Value="@(_items.IndexOf(item))">@(item.ToString())</SelectItem>
        }
        //<SelectItem Value="@(_items.IndexOf(item))">@Display(item)</SelectItem>
        
    }
</Select>

@code {

    int _selectedItemIndex=-1;
    [Parameter]
    public IEnumerable<TItem> Data { get; set; }=new List<TItem>();

    List<TItem> _items => Data.ToList();


    [Parameter]
    public RenderFragment<TItem> ChildContent { get; set; }

    [Parameter]
    public TItem SelectedItem { get; set; }
    [Parameter]
    public EventCallback<TItem> SelectedItemChanged { get; set; }

    [Parameter]
    public string SelectMessage { get; set; } = "انتخاب کنید";

    [Parameter]
    public bool ShowSelectMessage { get; set; } = true;

    [Parameter]
    public Size Size { get; set; } = Size.None;


    private async Task OnSelectedIdChanged(int index)
    {
        _selectedItemIndex = index;
        SelectedItem = Data.ElementAt(index);
        await SelectedItemChanged.InvokeAsync(SelectedItem);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if(!Data.Any())return;
        if (ShowSelectMessage) return;
        await OnSelectedIdChanged(0);

    }



}